generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String  @id @default(cuid())
  name     String? @unique
  email    String  @unique
  password String
  image    String?

  piggyBankId Int?       @unique
  piggyBank   PiggyBank? @relation(fields: [piggyBankId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Goal        Goal?
  
  demoPortfolio DemoPortfolio?

  Account Account[]
  Session Session[]
}

model PiggyBank {
  id     Int   @id @unique @default(autoincrement())
  money  Float @default(0)
  goalId Int   @unique

  goal          Goal            @relation(fields: [goalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User          User?
  PiggyBankGoal PiggyBankGoal[]
}

model Goal {
  id Int @id @unique @default(autoincrement())

  userId         String          @unique
  name           String
  description    String?
  price          Float           @default(0)
  picture        String?
  piggyBankGoals PiggyBankGoal[]

  User      User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PiggyBank PiggyBank?
}

model PiggyBankGoal {
  id Int @id @unique @default(autoincrement())

  piggyBankId Int
  goalId      Int

  piggyBank PiggyBank @relation(fields: [piggyBankId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  goal      Goal      @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@unique([piggyBankId, goalId])
}

model DemoPortfolio {
  userId       String  @id
  demo_balance Float   @default(0)
  assets       Asset[]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Asset {
  id            Int     @id @default(autoincrement())
  demoPortfolioId String
  name          String
  bought_at     DateTime
  price_bought  Int
  sold_at       DateTime?
  price_sold    Int?    @default(0)
  active        Boolean @default(true)

  demoPortfolio DemoPortfolio @relation(fields: [demoPortfolioId], references: [userId], onDelete: Cascade)
}
